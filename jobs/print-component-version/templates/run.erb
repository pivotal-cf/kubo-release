#!/bin/bash

set -euo pipefail

cd /var/vcap/jobs/print-component-version/packages

# cifs-utils/mount.cifs must run as root, which is fine for an errand
MOUNT_CIFS_VERSION="$(cifs-utils/mount.cifs -V)"

pushd conntrack > /dev/null
  LIBNETFILTER_VERSION="$(dpkg -f libnetfilter*.deb Version)"
  CONNTRACK_VERSION="$(dpkg -f conntrack*.deb Version)"
  LIBMLN0_VERSION="$(dpkg -f libmnl0*.deb Version)"
popd > /dev/null

pushd cni/bin > /dev/null
  NSENTER_VERSION="$(./nsenter -V)"
  declare -a CNI_BINARIES=("bridge" "flannel" "host-local" "loopback" "ptp" "tuning" "dhcp" "host-device" "ipvlan" "macvlan" "portmap" "sample" "vlan")

  # sadly, these binaries (besides 'nsenter') do NOT have the release's version number burned in to them,
  # so we report a version that was previously extracted from the tarball name

  CNI_RELEASE_VERSION=$(cat BOSHCYCLE_CNI_RELEASE_VERSION)
popd > /dev/null

pushd etcdctl > /dev/null
  # somehow combining the ./etcdctl and head in same line creates 141 error, so keep separate
  ETCDCTL_VERSION="$(./etcdctl -v)"
  ETCDCTL_VERSION="$(echo "$ETCDCTL_VERSION" | head -n 1)"
popd > /dev/null

pushd flanneld > /dev/null
  # flanneld directs version output to stderr, so redirect it
  # https://github.com/coreos/flannel/blob/master/main.go#L185
  FLANNELD_VERSION="$(./flanneld -version 2>&1)"
popd > /dev/null

pushd golang-1.12-linux > /dev/null
  GOLANG_VERSION="$(./bin/go version)"
popd > /dev/null

pushd ipset > /dev/null
  LIBIPSET_VERSION="$(dpkg -f libipset*.deb Version)"
  IPSET_VERSION="$(dpkg -f ipset*.deb Version)"
popd > /dev/null

pushd jq > /dev/null
  JQ_VERSION="$(./bin/jq --version)"
popd > /dev/null

pushd nfs > /dev/null
  KEYUTILS_VERSION="$(dpkg -f keyutils*.deb Version)"
  LIBEVENT_VERSION="$(dpkg -f libevent*.deb Version)"
  LIBNFSIDMAP_VERSION="$(dpkg -f libnfsidmap*.deb Version)"
  NFS_COMMON_VERSION="$(dpkg -f nfs-common*.deb Version)"
  RPCBIND_VERSION="$(dpkg -f rpcbind*.deb Version)"
popd > /dev/null

pushd socat > /dev/null
  # the version output includes a lot of useless info, so trim to suit
  SOCAT_VERSION="$(./bin/socat -V | head -n 2 | tail -n 1)"
popd > /dev/null

# $1 = package name
# $2 = package version
# $3 = license
# $4 = tgz name
# $5 = url
# ex. print_osm_format ctop "$CTOP_VERSION" GPL2 name-of-ctop.tgz URL
print_osm_format() {
  cat <<EOF
other:$1:$2:
  name: $1
  version: '$2'
  repository: Other
  license: $3
  other-distribution: /tmp/osl/$4
  url: $5
EOF
}

print_osm_format cifs-utils "$MOUNT_CIFS_VERSION" LICENSE path-to-cifs-utils.tgz URL
print_osm_format conntrack "$CONNTRACK_VERSION" LICENSE path-to-contrack.tgz URL
print_osm_format libnetfilter "$LIBNETFILTER_VERSION" LICENSE path-to-libnetfilter.tgz URL
print_osm_format libmln0 "$LIBMLN0_VERSION" LICENSE path-to-libmln0.tgz URL
# TODO: should there be CNI itself?
print_osm_format nsenter "$NSENTER_VERSION" LICENSE path-to-nsenter.tgz URL
for binaryName in "${CNI_BINARIES[@]}"; do
  print_osm_format "$binaryName" "${CNI_RELEASE_VERSION}" LICENSE path-to-binary.tgz URL
done
print_osm_format etcdctl "$ETCDCTL_VERSION" LICENSE path-to-etcdctl.tgz URL
print_osm_format flanneld "$FLANNELD_VERSION" LICENSE path-to-flanneld.tgz URL
print_osm_format golang "$GOLANG_VERSION" LICENSE path-to-golang.tgz URL
print_osm_format ipset "$IPSET_VERSION" LICENSE path-to-ipset.tgz URL
print_osm_format libipset "$LIBIPSET_VERSION" LICENSE path-to-libipset.tgz URL
print_osm_format jq "$JQ_VERSION" LICENSE path-to-jq.tgz URL
# TODO: should we print each individual component of kubernetes?
print_osm_format kubernetes "$(./kubernetes/bin/kube-apiserver --version)" LICENSE path-to-k8s.tgz URL
print_osm_format keyutils "$KEYUTILS_VERSION" LICENSE path-to-keyutils.tgz URL
print_osm_format libevent "$LIBEVENT_VERSION" LICENSE path-to-libevent.tgz URL
print_osm_format libnfsidmap "$LIBNFSIDMAP_VERSION" LICENSE path-to-libnfsidmap.tgz URL
print_osm_format nfs-common "$NFS_COMMON_VERSION" LICENSE path-to-nfs-common.tgz URL
print_osm_format rpcbind "$RPCBIND_VERSION" LICENSE path-to-rpcbind.tgz URL
print_osm_format socat "$SOCAT_VERSION" LICENSE path-to-socat.tgz URL

# leaving this here for reference to get individual component versions of k8s if needed
#cat <<EOF
#- name: "kubernetes"
#  components:
#  - "marketing_name": "kube-apiserver"
#    "marketing_version": "$(./kubernetes/bin/kube-apiserver --version)"
#  - "marketing_name": "kube-controller-manager"
#    "marketing_version": "$(./kubernetes/bin/kube-controller-manager --version)"
#  - "marketing_name": "kubectl"
#    "marketing_version": "$(./kubernetes/bin/kubectl version --short --client=true)"
#  - "marketing_name": "kubelet"
#    "marketing_version": "$(./kubernetes/bin/kubelet --version)"
#  - "marketing_name": "kube-proxy"
#    "marketing_version": "$(./kubernetes/bin/kube-proxy --version)"
#  - "marketing_name": "kube-scheduler"
#    "marketing_version": "$(./kubernetes/bin/kube-scheduler --version)"
#EOF
